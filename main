local config = {}
local Serialize

local SpecialCharacters = {
	["\a"] = "\\a", 
	["\b"] = "\\b", 
	["\f"] = "\\f", 
	["\n"] = "\\n", 
	["\r"] = "\\r", 
	["\t"] = "\\t", 
	["\v"] = "\\v", 
	["\0"] = "\\0"
}

local Keywords = { 
	["and"] = true, 
	["break"] = true, 
	["do"] = true, 
	["else"] = true, 
	["elseif"] = true, 
	["end"] = true, 
	["false"] = true, 
	["for"] = true, 
	["function"] = true, 
	["if"] = true, 
	["in"] = true, 
	["local"] = true, 
	["nil"] = true, 
	["not"] = true, 
	["or"] = true, 
	["repeat"] = true, 
	["return"] = true, 
	["then"] = true, 
	["true"] = true, 
	["until"] = true, 
	["while"] = true, 
	["continue"] = true
}

local DataTypes = {
	["Axes"] = true,
	["BrickColor"] = true,
	["CatalogSearchParams"] = true,
	["CFrame"] = true,
	["Color3"] = true,
	["ColorSequence"] = true,
	["ColorSequenceKeypoint"] = true,
	["DateTime"] = true,
	["DockWidgetPluginGuiInfo"] = true,
	["Enum"] = true,
	["Faces"] = true,
	["Instance"] = true,
	["NumberRange"] = true,
	["NumberSequence"] = true,
	["NumberSequenceKeypoint"] = true,
	["OverlapParams"] = true,
	["PathWaypoint"] = true,
	["PhysicalProperties"] = true,
	["Random"] = true,
	["Ray"] = true,
	["RaycastParams"] = true,
	["RaycastResult"] = true,
	["Rect"] = true,
	["Region3"] = true,
	["Region3int16"] = true,
	["TweenInfo"] = true,
	["UDim"] = true,
	["UDim2"] = true,
	["Vector2"] = true,
	["Vector2int16"] = true,
	["Vector3"] = true,
	["Vector3int16"] = true
}

local function GetFullName(Object)
	local Hierarchy = {}
	local ChainLength, Parent = 1, Object
	while Parent do
		Parent = Parent.Parent
		ChainLength = ChainLength + 1
	end

	Parent = Object
	local Number = 0
	while Parent do
		Number += 1
		local ObjectName = string.gsub(Parent.Name, "[%c%z]", SpecialCharacters)
		ObjectName = Parent == game and "game" or ObjectName
		if Keywords[ObjectName] or not string.match(ObjectName, "^[_%a][_%w]*$") then
			ObjectName = string.format("[\"%s\"]", ObjectName)
		elseif Number ~= ChainLength - 1 then
			ObjectName = string.format(".%s", ObjectName)
		end

		Hierarchy[ChainLength - Number] = ObjectName
		Parent = Parent.Parent
	end

	return table.concat(Hierarchy)
end

local function Tostring(obj) 
	local mt, r, b = getmetatable(obj)
	if not mt or typeof(mt) ~= "table" then
		return tostring(obj)
	end

	b = rawget(mt, "__tostring")
	rawset(mt, "__tostring", nil)
	r = tostring(obj)
	rawset(mt, "__tostring", b)
	return r
end

local function serializeArgs(...) 
	local Serialized = {} -- For performance reasons
	for i,v in pairs({...}) do
		local valueType = typeof(v)
		local SerializeIndex = #Serialized + 1
		if valueType == "string" then
			Serialized[SerializeIndex] = string.format("\27[32m\"%s\"\27[0m", v)
		elseif valueType == "table" then
			Serialized[SerializeIndex] = Serialize(v, 0)
		else
			Serialized[SerializeIndex] = Tostring(v)
		end
	end

	return table.concat(Serialized, ", ")
end

local function formatFunction(func)
	if debug.getinfo then -- Creates function prototypes
		local proto = debug.getinfo(func)
		local params = {}
		if proto.nparams then
			for i=1, proto.nparams do
				params[i] = string.format("p%d", i)
			end
			if proto.isvararg then
				params[#params+1] = "..."
			end
		end

		return string.format("function(%s) --[[ Function Name: \"%s\" ]] end", table.concat(params, ", "), proto.namewhat or proto.name or "")
	end

	return "function() end" -- we cannot create a prototype
end

local function formatString(str) 
	local Pos = 1
	local String = {}
	while Pos <= #str do
		local Key = string.sub(str, Pos, Pos)
		if Key == "\n" then
			String[Pos] = "\\n"
		elseif Key == "\t" then
			String[Pos] = "\\t"
		elseif Key == "\"" then
			String[Pos] = "\\\""
		else
			local Code = string.byte(Key)
			if Code < 32 or Code > 126 then
				String[Pos] = string.format("\\%d", Code)
			else
				String[Pos] = Key
			end
		end

		Pos = Pos + 1
	end

	return table.concat(String)
end

-- We can do a little trolling and use this for booleans too
local function formatNumber(numb) 
	if numb == math.huge then
		return "math.huge"
	elseif numb == -math.huge then
		return "-math.huge"
	end

	return Tostring(numb)
end

local function formatIndex(idx, scope)
	local indexType = typeof(idx)
	local finishedFormat = idx
	if indexType == "string" then
		finishedFormat = string.format("\"%s\"", formatString(idx))
	elseif indexType == "table" then
		scope = scope + 1
		finishedFormat = Serialize(idx, scope)
	elseif indexType == "number" or indexType == "boolean" then
		finishedFormat = formatNumber(idx)
	elseif indexType == "function" then
		finishedFormat = formatFunction(idx)
	elseif indexType == "Instance" then
		finishedFormat = GetFullName(idx)
	else
		finishedFormat = Tostring(idx)
	end

	return string.format("[%s]", finishedFormat)
end

return function(tbl, scope, checked)
	local scope = scope or 0
	local Serialized = {} -- For performance reasons
	local scopeTab = string.rep("	", scope)
	local scopeTab2 = string.rep("	", scope + 1)

	local tblLen = 0
	for i,v in pairs(tbl) do
		local IndexNeeded = tblLen + 1 ~= i
		local formattedIndex = string.format(IndexNeeded and "%s = " or "", formatIndex(i, scope))
		local valueType = typeof(v)
		local SerializeIndex = #Serialized + 1

		if valueType == "string" then -- Could of made it inline but its better to manage types this way.
			Serialized[SerializeIndex] = string.format("%s%s\"%s\",\n", scopeTab2, formattedIndex, formatString(v))
		elseif valueType == "number" or valueType == "boolean" then
			Serialized[SerializeIndex] = string.format("%s%s%s,\n", scopeTab2, formattedIndex, formatNumber(v))
		elseif valueType == "table" then
			Serialized[SerializeIndex] = string.format("%s%s%s,\n", scopeTab2, formattedIndex, Serialize(v, (scope + 1), checked))
		elseif valueType == "userdata" then
			Serialized[SerializeIndex] = string.format("%s%s newproxy(),\n", scopeTab2, formattedIndex)
		elseif valueType == "function" then
			Serialized[SerializeIndex] = string.format("%s%s%s,\n", scopeTab2, formattedIndex, formatFunction(v))
		elseif valueType == "Instance" then
			Serialized[SerializeIndex] = string.format("%s%s%s,\n", scopeTab2, formattedIndex, game.GetFullName(v))
		elseif DataTypes[valueType] then
            if valueType == "CFrame" then
                local X, Y, Z = v:GetComponents()
                local RX, RY, RZ = v:ToEulerAnglesXYZ()
                Serialized[SerializeIndex] = string.format("%s%s%s.new(%s)%s,\n", scopeTab2, formattedIndex, valueType, string.format("%s, %s, %s", X, Y, Z), string.format(((RX > 0 or RX < 0) or (RY > 0 or RY < 0) or (RZ > 0 or RZ < 0)) and " * CFrame.Angles(%s, %s, %s)" or "", RX, RY, RZ))
            elseif valueType == "ColorSequence" then
                local Sequence = {}
				local Keypoints = v.Keypoints
				for i = 1, #Keypoints do
					local Keypoint = Keypoints[i]
					Sequence[#Sequence + 1] = string.format("\n%sColorSequenceKeypoint.new(%s, %s)", string.rep("	", (scope + 2)), Keypoint.Time, string.format("Color3.fromRGB(%d, %d, %d)", (Keypoint.Value.R * 255), (Keypoint.Value.G * 255), (Keypoint.Value.B * 255)))
				end

                Serialized[SerializeIndex] = string.format("%s%s%s.new({%s\n%s}),\n", scopeTab2, formattedIndex, valueType, table.concat(Sequence, ","), scopeTab2)
            elseif valueType == "Color3" then
                Serialized[SerializeIndex] = string.format("%s%s%s.fromRGB(%s),\n", scopeTab2, formattedIndex, valueType, string.format("%d, %d, %d", (v.R * 255), (v.G * 255), (v.B * 255)))
            else
                Serialized[SerializeIndex] = string.format("%s%s%s.new(%s),\n", scopeTab2, formattedIndex, valueType, Tostring(v))
            end
		else
			Serialized[SerializeIndex] = string.format("%s%s\"%s\",\n", scopeTab2, formattedIndex, Tostring(v)) -- Unsupported types.
		end

		tblLen = tblLen + 1 -- # messes up with nil values
	end

	-- Remove last comma
	local lastValue = Serialized[#Serialized]
	if lastValue then
		Serialized[#Serialized] = string.format("%s\n", string.sub(lastValue, 0, -3))
	end

	if tblLen > 0 then
		if scope < 1 then
			return string.format("return {\n%s}", table.concat(Serialized))  
		else
			return string.format("{\n%s%s}", table.concat(Serialized), scopeTab)
		end
	else
		return "{}"
	end
end
